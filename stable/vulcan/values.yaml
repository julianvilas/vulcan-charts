# Default values for vulcan.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  domain: vulcan.local
  region: eu-west-1
  accountId: "000000000000"

    # -- custom labels for all components
  podLabels: {}
    # foo: bar

# -- Anchors
anchors:

  # -- postgres database settings
  db: &db
    host:
    name:
    user:
    password: TBD
    port: 5432
    sslMode: disable
    ca:

  dogstatsd: &dogstatsd
    image:
      repository: datadog/dogstatsd
      tag: 7.66.0
    enabled: true

  # Default values for all the components
  comp: &comp

    replicaCount:
    image:
      pullPolicy: Always

    # -- defines the required services for the component
    meta:
      sqs: false
      sns: false
      s3: false

    initContainers:
    # - name: init
    #   image: busybox
    #   command: ['sh', '-c', 'echo "hello world from {{.Values.global.region}}"']

    # -- custom extra labels
    extraPodLabels: {}
    # foo: bar

    # -- custom env variables
    extraEnv: {}
    #   FOO: BAR

    # -- custom extra volume mounts
    extraVolumeMounts: []
    # - name: cache-volume
    #   mountPath: /cache

    # -- custom extra volumes
    extraVolumes: []
    # - name: cache-volume
    #   emptyDir:
    #     sizeLimit: 500Mi

    serviceAccount:
      create: false
      automountServiceAccountToken: false
      annotations: {}

    automountServiceAccountToken: false

    # -- proxy settings
    proxy: &proxy
      enabled: true
      image:
        repository: haproxy
        tag: 2.4.25-alpine
      port: 9090
      metricsPort: 9101
      cache:
        enabled: false
        maxSize: 64   # mb
        maxAge: 240   # seconds
      probe: false
      probePath: /healthz
      probeInitialDelay: 5
      probeTimeoutSeconds: 3
      timeoutConnect:
      timeoutClient:
      timeoutServer:
      timeoutTunnel:
      lifecycle:
        preStopSleep: 30
      resources: {}

    podSecurityContext: {}

    securityContext: {}

    imagePullSecrets: []
    nameOverride: ""
    fullnameOverride: ""
    containerPort: 8080

    lifecycle:
      preStopSleep: 30

    # -- liveness settings
    livenessProbe: &comp-livenessProbe
      enabled: true
      path:
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 3
      successThreshold: 1
      failureThreshold: 10

    # -- readiness settings
    readinessProbe: &comp-readynessProbe
      enabled: true
      # -- defaults to healthcheckPath
      path:
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 3
      successThreshold: 1
      failureThreshold: 5

    # -- autoscaling settings
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage:
      behavior: {}

    # -- service settings
    service:
      type: ClusterIP
      port: 80
      portName:
      protocol: TCP
      targetPort:

    # -- ingress settings
    ingress:
      enabled: false
      annotations: {}
      hosts: []
      tls: []

    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}


postgresql:
  enabled: false
  service:
    port: 5432
  auth:
    username: postgres
    postgresPassword: secret
    password: secret
    database: persistence
  primary:
    initdb:
      scripts:
        initial-dbs.sql: |
          CREATE DATABASE api;
          CREATE DATABASE scanengine;
          CREATE DATABASE reportsgenerator;
          CREATE DATABASE vulnerabilitydb;
          CREATE DATABASE tracker;
    resources:
      requests:
        cpu: "0"
        memory: "0"
    persistence:
      enabled: false
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9187"
  metrics:
    enabled: false

redis:
  enabled: false
  architecture: standalone
  auth:
    enabled: false
  master:
    service:
      ports:
        redis: 6379
    persistence:
      enabled: false
  serviceAccount:
    create: false

localstack:
  enabled: false
  name: localstack
  startServices: sqs,sns,s3       # s3 activated to pass the localstack tests.
  enableStartupScripts: true
  startupScriptContent: |
    #!/bin/bash

    export AWS_DEFAULT_REGION={{ .Values.global.region }}

    awslocal sqs create-queue --queue-name VulcanK8SReportsGenerator
    awslocal sqs create-queue --queue-name VulcanK8SScanEngineCheckStatus
    awslocal sqs create-queue --queue-name VulcanK8SV2ChecksGeneric
    awslocal sqs create-queue --queue-name VulcanK8SVulnDBChecks

    awslocal sns create-topic --name VulcanK8SChecks
    awslocal sns subscribe --topic-arn "arn:aws:sns:${AWS_DEFAULT_REGION}:{{ .Values.global.accountId }}:VulcanK8SChecks" --protocol sqs --notification-endpoint "arn:aws:sqs:${AWS_DEFAULT_REGION}:${LOCALSTACK_DUMMY_ID}:VulcanK8SVulnDBChecks"

    awslocal sns create-topic --name VulcanK8SScans
    awslocal sns create-topic --name VulcanK8SReportsGen
    awslocal sns subscribe --topic-arn "arn:aws:sns:${AWS_DEFAULT_REGION}:{{ .Values.global.accountId }}:VulcanK8SReportsGen" --protocol sqs --notification-endpoint "arn:aws:sqs:${AWS_DEFAULT_REGION}:${LOCALSTACK_DUMMY_ID}:VulcanK8SReportsGenerator"

    awslocal sns create-topic --name VulcanK8SVulnDBVulns
    {{- with .Values.extraStartupScriptContent }}

    # FROM extraStartupScriptContent

    {{ . }}
    {{- end }}

  # extraStartupScriptContent: |
  #   awslocal sqs create-queue --queue-name VulcanK8SV2ChecksGeneric
  #   awslocal sqs create-queue --queue-name VulcanK8SVulnDBChecks

  ## Ref. https://docs.localstack.cloud/references/configuration/
  ## extraEnvVars:
  ##   - name: SERVICES
  ##     value: "serverless,sqs,es"
  ingress:
    enabled: false
  service:
    type: ClusterIP
    externalServicePorts:
      start: 0
      end: 0
  serviceAccount:
    create: false
  role:
    create: false


minio:
  enabled: false
  nameOverride: minio
  mode: standalone
  defaultBuckets: "reports,logs,scans,crontinuous"
  serviceAccount:
    create: false
  persistence:
    enabled: false
  service:
    ports:
      api: 80
  auth:
    rootUser: admin
    rootPassword: adminsecret
  extraEnv:
    - name: MINIO_REGION_NAME
      value: local


results:
  enabled: true
  name: results
  <<: *comp

  image:
    repository: adevinta/vulcan-results
    tag: edge
    pullPolicy: Always

  conf:
    debug: "false"
    region:
    bucketReports: reports
    bucketLogs: logs
    linkBase: http://vulcan-results

  healthcheckPath: /healthcheck

  dogstatsd: *dogstatsd

  meta:
    s3: true


persistence:
  enabled: true
  name: persistence
  <<: *comp

  image:
    repository: adevinta/vulcan-persistence
    tag: edge
    pullPolicy: Always

  healthcheckPath: /status

  meta:
    s3: true
    sns: true
    sqs: true

  # -- postgres database settings
  db:
    <<: *db
    name: persistence

  conf:
    logLevel: warn
    secretKeyBase: TBDTBD
    railsMaxThreads: 4

  dogstatsd: *dogstatsd


stream:
  enabled: true
  name: stream
  <<: *comp

  image:
    repository: adevinta/vulcan-stream
    tag: edge
    pullPolicy: Always

  healthcheckPath: /status

  conf:
    logLevel: "DEBUG"
    ttl: 0  # default

  redis:
    host:
    port:
    username:
    password:
    db: 0   # default

  dogstatsd: *dogstatsd


api:
  enabled: true
  name: api
  <<: *comp

  image:
    repository: adevinta/vulcan-api
    tag: edge
    pullPolicy: Always

  meta:
    sqs: true
    sns: true
    s3: true

  healthcheckPath: /api/v1/healthcheck

  # -- postgres database settings
  db:
    <<: *db
    name: api

  conf:
    bucketReports: reports
    bucketLogs: logs
    reports:
      snsArn: arn:aws:sns:{{.Values.global.region}}:{{ .Values.global.accountId }}:VulcanK8SReportsGen
      vulcanUIUrl:
    secretKey: TBDTBD
    cookieDomain:     # default .Values.global.domain
    saml:
      metadata: https://okta/app/TBD/sso/saml/metadata
      issuer: http://okta/TBD
      callback:   # https://vulcan-api/api/v1/login/callback
      trustedDomains: '[]'  # '["vulcan-api"]'
    logLevel: INFO
    defaultOwners: '[]'  # '["owner1","owner2"]'
    vulndbapiUrl:   # http://vulnerabilitydbapi
    vulcantrackerUrl:  # http://vulcantracker
    vulcantrackerTeams:   # "team1,team2"
    persistenceHost:
    crontinuousUrl:
    reportsgeneratorUrl:
    scanengineUrl:
    apiHostname:
    awscatalogue:
      kind: None
      url: http://catalogue.example.com
      key: key
      retries: 1
      retry_interval: 2
    # -- array of name/allowedAssettypes/blockedAssettypes/allowedChecks/blockedChecks/excludingSuffixes which allows to customise global program policies
    globalPolicies:
      # - name: web-scanning-global
      #   allowedChecks:
      #     - vulcan-zap
      #     - vulcan-burp
      #   excludingSuffixes:
      #     - experimental
      # - name: default-global
      #   blockedChecks:
      #     - vulcan-masscan
      #     - vulcan-zap
    kafka:
      broker:
      username:
      password:
      topics:     # '{assets = "assets"}'

  dogstatsd: *dogstatsd

  ingress:
    path: /api


crontinuous:
  enabled: true
  name: crontinuous
  <<: *comp

  image:
    repository: adevinta/vulcan-crontinuous
    tag: edge
    pullPolicy: Always

  meta:
    s3: true

  healthcheckPath: /healthcheck

  conf:
    region:
    vulcanToken: TBDTBDTBD
    crontinuousBucket: crontinuous
    vulcanUser: tbd
    vulcanApi:    # http://host/api
    enableTeamsWhitelistScan: "false"
    teamsWhitelistScan: '[]'
    enableTeamsWhitelistReport: "false"
    teamsWhitelistReport: '[]'


scanengine:
  enabled: true
  name: scanengine
  <<: *comp

  image:
    repository: adevinta/vulcan-scan-engine
    tag: edge
    pullPolicy: Always

  healthcheckPath: /v1/healthcheck

  meta:
    sqs: true
    sns: true

  conf:
    logLevel: "error"
    queueArn: arn:aws:sqs:{{ .Values.global.region }}:{{ .Values.global.accountId }}:VulcanK8SScanEngineCheckStatus
    queueName: VulcanK8SScanEngineCheckStatus
    scansSNS:
      topicArn: arn:aws:sns:{{ .Values.global.region }}:{{ .Values.global.accountId }}:VulcanK8SScans
    checksSNS:
      topicArn: arn:aws:sns:{{ .Values.global.region }}:{{ .Values.global.accountId }}:VulcanK8SChecks
    queues:
      default:
        arn: arn:aws:sqs:{{ .Values.global.region }}:{{ .Values.global.accountId }}:VulcanK8SV2ChecksGeneric
      # -- array of arn/checktypes
      other:
      # - arn: arn:aws:sqs:{{ .Values.global.region }}:{{ .Values.global.accountId }}:VulcanK8SV2QueueZap
      #   checktypes: '["vulcan-zap"]'
      # - arn: arn:aws:sqs:{{ .Values.global.region }}:{{ .Values.global.accountId }}:VulcanK8SV2QueueBurp
      #   checktypes: '["vulcan-burp"]'
    persistenceHost:
    streamUrl:
    checkCreator:
      numOfWorkers: 2
      period: 20

  # -- postgres database settings
  db:
    <<: *db
    name: scanengine

  dogstatsd: *dogstatsd


ui:
  enabled: true
  name: ui
  <<: *comp

  image:
    repository: adevinta/vulcan-ui
    tag: edge
    pullPolicy: Always

  healthcheckPath: /index.html

  meta:
    sqs: false

  conf:
    apiUrl:   # https://vulcan-api/api/v1/
    docs:
      apiLink: https://docs.example.com/vulcan/vulcan-api/   # vulcan API doc
      whitelistingLink:   # vulcan scanner IPs
      discoveryLink: https://docs.example.com/vulcan/discovery  # vulcan asset discovery doc
      auditRoleLink: https://docs.example.com/vulcan/network-access  # vulcan AWS audit role doc
    contact:
      email: vulcan@example.com   # vulcan contact email
      slack: https://example.slack.com/archives/XXXXX    # vulcan slack channel
    dashboard:
      # -- if not set redirects to UI's dashboard.html
      link:   # vulcan metrics dashboard


reportsgenerator:
  enabled: true
  name: reportsgenerator
  <<: *comp

  image:
    repository: adevinta/vulcan-reports-generator
    tag: edge
    pullPolicy: Always

  healthcheckPath: /healthcheck

  meta:
    sqs: true
    s3: true

  conf:
    logLevel: "error"
    queueArn: arn:aws:sqs:{{ .Values.global.region }}:{{ .Values.global.accountId }}:VulcanK8SReportsGenerator
    queueName: VulcanK8SReportsGenerator
    sqsNumProcessors:
    scanengineUrl:
    resultsUrl:
    generators:
      livereport:
        emailSubject: Vulcan Digest
    ses:
      region:
      from: vulcan@example.com
      cc: '["security@example.com"]'

  # -- postgres database settings
  db:
    <<: *db
    name: reportsgenerator

  dogstatsd: *dogstatsd


tracker:
  enabled: false
  name: tracker
  <<: *comp

  image:
    repository: adevinta/vulcan-tracker
    tag: edge
    pullPolicy: Always

  healthcheckPath: /healthcheck

  conf:
    logLevel: "error"
    awsServerCredentialKey: "/path/to/credentials/"
    region:

  # -- postgres database settings
  db:
    <<: *db
    name: tracker

  dogstatsd: *dogstatsd


vulndbapi:
  enabled: true
  name: vulndbapi
  <<: *comp

  image:
    repository: adevinta/vulnerability-db-api
    tag: edge
    pullPolicy: Always

  healthcheckPath: /healthcheck

  conf:
    logLevel: info
    readReplicaHost: ""

  # -- postgres database settings
  db:
    <<: *db
    name: vulnerabilitydb


vulndb:
  enabled: true
  name: vulndb
  <<: *comp

  image:
    repository: adevinta/vulnerability-db
    tag: edge
    pullPolicy: Always

  conf:
    logLevel: info
    checksQueueArn: arn:aws:sqs:{{ .Values.global.region }}:{{ .Values.global.accountId }}:VulcanK8SVulnDBChecks
    vulnsTopicArn: arn:aws:sns:{{ .Values.global.region }}:{{ .Values.global.accountId }}:VulcanK8SVulnDBVulns
    sqsNumProcessors:
    vulnsTopicEnabled: true
    maxEventAge: 365
    resultsUrl: http://vulcan-results.vulcan.com
    resultsInternalUrl:   # http://vulcan-results
    taskPurgeCron:  # "40 5 * * SAT"
    kafka:
      enabled: false
      username:
      password:
      broker:
      topic:

  proxy:
    enabled: false

  meta:
    sqs: true
    sns: true

  # -- postgres database settings
  db:
    <<: *db
    name: vulnerabilitydb


sqsexporter:
  enabled: true
  name: sqsexporter
  <<: *comp
  image:
    repository: jesusfcr/sqs-prometheus-exporter
    tag: 0.4.0
    pullPolicy: Always

  proxy:
    enabled: false

  queueNamePrefix: VulcanK8S
  meta:
    sqs: true


dogstatsd:
  name: dogstatsd
  apiKey: TBD


# -- Allows to inject custom manifests that would be processed as templates
extraManifests: {}
  # config1: |
  #   apiVersion: v1
  #   kind: ConfigMap
  #   ...
  # config2: |
  #   apiVersion: v1
  #   ...
